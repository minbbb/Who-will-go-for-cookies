from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, InlineQueryHandler
from telegram import InlineQueryResultArticle, InputTextMessageContent
from uuid import uuid4
import random

updater = Updater(token='TOKEN', use_context=True)

variationsRU = ("{} –±–µ–∂–∏—Ç –∑–∞ –ø–µ—á–µ–Ω—é—Ö–∞–º–∏", "{} –∫–æ–≤—ã–ª—è–µ—Ç –∑–∞ –ø–µ—á–µ–Ω—å–µ–º", "{} —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –º—á–∏—Ç—Å—è –∑–∞ –∫—É–∫–∏—Å–∞–º–∏", "{} –≤ —Å–ª–æ—É–º–æ —É–Ω–æ—Å–∏—Ç—Å—è –∑–∞ –ø–µ—á–µ–Ω–±–∫–∞–º–∏", "–°–æ–±–∏—Ä–∞—è —Å–≤–æ—ë —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ {} —É—Ö–æ–¥–∏—Ç –≤ –ø—É—Å—Ç–æ—à–∏ —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –∫—Ä—ã—Å–∞–º–∏ –º—É—Ç–∞–Ω—Ç–∞–º–∏ –∑–∞ –∫—Ä—ã—à–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∫—É–ø–∏—Ç –ø–µ—á–µ–Ω—å–µ")
variationsEN = ("{} running for cookies", "{} goes in slow motion for cookies")

def start(update, context):
	if update.message.from_user.language_code == "ru":
		context.bot.send_message(chat_id=update.message.chat_id, text="–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º–µ–Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø–æ—Ö–æ–¥ –∑–∞ –ø–µ—á–µ–Ω—å–∫–∞–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ò —è —Å–∫–∞–∂—É –∫—Ç–æ –ø–æ–π–¥—ë—Ç –∑–∞ –ø–µ—á–µ–Ω—å–µ–º))0)\n–õ–∏–±–æ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –¥–µ–ª–∞—Ç—å —Ç–æ–∂–µ —Å–∞–º–æ–µ –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–∞—á–∞–ª–µ /cookie (–ø—Ä–∏–º–µ—Ä - /cookie –∏–º—è1 –∏–º—è2). –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –≤ inline —Ä–µ–∂–∏–º–µ, –¥–ª—è —ç—Ç–æ–≥–æ –≤ –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–±–µ—Ä–∏ @Who_will_go_for_cookies_bot –∏ –∏–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
	else:
		context.bot.send_message(chat_id=update.message.chat_id, text="Send me the names of the candidates for the campaign for cookies through the space.\nAnd I will tell you who will go for cookies))0)\nOr you can add me to the group and do the same thing adding at the beginning /cookie (example - /cooke name1 name2). Or use me in inline mode, for this in any chat type @Who_will_go_for_cookies_bot and the names are separated by a space.")

def cookie(update, context):
	if update.message.text == "/cookie":
		if update.message.from_user.language_code == "ru":
			context.bot.send_message(chat_id=update.message.chat_id, text="–¢–∞–∫ –Ω–µ –ø–æ–π–¥—ë—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ /cookie –∏ –∏–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä - /cookie –∏–º—è1 –∏–º—è2)")
		else:
			context.bot.send_message(chat_id=update.message.chat_id, text="So it will not work, I need /cookie and names separated by a space (example - /cooke name1 name2)")
		return
	if context.args is None:
		res = random.choice(update.message.text.split())
	else:
		res = random.choice(context.args)
	if update.message.from_user.language_code == "ru":
		res = random.choice(variationsRU).format(res)
	else:
		res = random.choice(variationsEN).format(res)
	context.bot.send_message(chat_id=update.message.chat_id, text=res)

def inlinequery(update, context):
	if update.inline_query.query != "":
		query = update.inline_query.query.split()
		res = random.choice(query)
		if update.inline_query.from_user.language_code == "ru":
			res = random.choice(variationsRU).format(res)
		else:
			res = random.choice(variationsEN).format(res)
		update.inline_query.answer([InlineQueryResultArticle(id=uuid4(), title="üç™ Choose your fighter", input_message_content=InputTextMessageContent(res))], cache_time=1)

updater.dispatcher.add_handler(CommandHandler('start', start))
updater.dispatcher.add_handler(CommandHandler('cookie', cookie))
updater.dispatcher.add_handler(MessageHandler(Filters.text, cookie))
updater.dispatcher.add_handler(InlineQueryHandler(inlinequery))
updater.start_polling()
updater.idle()
